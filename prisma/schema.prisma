generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Department {
  id           Int         @id @default(autoincrement())
  code         String      @unique
  description  String?
  users        User[]    
  deptDivision DepartmentDivision[]
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}

model Division {
  id           Int         @id @default(autoincrement())
  code         String      @unique
  description  String?     
  users        User[]
  deptDivision DepartmentDivision[]
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}

model DepartmentDivision {
  id           Int         @id @default(autoincrement())
  departmentId Int  
  department   Department  @relation(fields: [departmentId], references: [id])
  divisionId   Int   
  division     Division    @relation(fields: [divisionId], references: [id])
}

model User {
  id           Int          @id @default(autoincrement())
  email        String       @unique
  password     String
  firstName    String
  middleName   String?
  lastName     String
  departmentId Int?
  refreshToken String?
  divisionId   Int?
  department   Department?  @relation(fields: [departmentId], references: [id])
  division     Division?    @relation(fields: [divisionId], references: [id])
  comments     Comment[]
  createdWorks Work[]
  tasks        Task[]
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  authoredProjects Project[]
  deadlineExtensions DeadlineExtensions[]
  logs         Log[]
}

model Comment {
  id           Int       @id @default(autoincrement())
  message      String
  userId       Int
  user         User      @relation(fields: [userId], references: [id])
  taskId       Int?
  task         Task?     @relation(fields: [taskId], references: [id])
  mentions     String[]
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Task {
  id           Int        @id @default(autoincrement())
  type         String
  status       String?    @default("todo")   
  description  String?
  title        String
  startDate    DateTime?
  endDate      DateTime?
  parentId     Int?
  parentTask   Task?      @relation("parentTask", fields: [parentId], references: [id])
  subtasks     Task[]     @relation("parentTask")
  workId       Int
  work         Work       @relation(fields: [workId], references: [id], onDelete: Cascade)
  current      Boolean    @default(false)
  comments     Comment[]
  assignedTo   User?      @relation(fields: [assignedToId], references: [id])
  assignedToId Int?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model Work {
  id           Int        @id @default(autoincrement())
  name         String
  type         String
  description  String?
  authorId     Int
  author       User       @relation(fields: [authorId], references: [id])
  tasks        Task[]     
  projectId    Int
  project      Project    @relation(fields: [projectId], references: [id], onDelete: Cascade)
  startDate    DateTime
  endDate      DateTime
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model Project {
  id           Int       @id @default(autoincrement())
  name         String
  startDate    DateTime?
  endDate      DateTime?
  description  String?
  works        Work[]
  authorId     Int
  author       User      @relation(fields: [authorId], references: [id])
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model DeadlineExtensions {
  id           Int       @id @default(autoincrement())
  extendedBy   Int
  user         User      @relation(fields: [extendedBy], references: [id])
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Log { 
  id           Int        @id @default(autoincrement())
  editedBy     Int        
  editor       User       @relation(fields: [editedBy], references: [id])
  logTypeId    Int
  logType      LogType    @relation(fields: [logTypeId], references: [id])   
  logMethodId  Int
  logMethod    LogMethod  @relation(fields: [logMethodId], references: [id]) 
  logs         Json
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model LogType {
  id           Int       @id @default(autoincrement())
  type         String    @unique
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  logs         Log[]
}

model LogMethod {
  id           Int       @id @default(autoincrement())
  method       String    @unique
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  logs         Log[]
}